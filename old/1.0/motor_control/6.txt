#include <EEPROMex.h>

// The following is a simple stepper motor control procedures
# define EN 8 // stepper motor enable , active low
# define ENDSTOP 9 // 
# define X_DIR 5 // X -axis stepper motor direction control
# define X_STP 2 // x -axis stepper control
# define Z1_STP 3
# define Z2_STP 4
# define Z1_DIR 6
# define Z2_DIR 7

int no_steps;
const byte numChars = 32;
char receivedChars[numChars];   // an array to store the received data
boolean newData = false;
int dataNumber = 0;             // new for this version
bool dir;
bool DC;
//uint16_t GP;
//uint16_t EEPROMaddress = 1 ;
bool olddir=0;
bool stopnow=0;

void step (bool dir, int no_steps)
{
  digitalWrite (EN, LOW);
    if(dir){
      digitalWrite(X_DIR, true);
    }
    else{
      digitalWrite(X_DIR, false);
    }
    delay (50);
    for (int i = 0; i < (abs(no_steps)*200); i++) 
    {

      if(!((digitalRead(ENDSTOP)==true)&&(olddir==dir))){
        digitalWrite (X_STP, HIGH);
        delayMicroseconds (200);
        digitalWrite (X_STP, LOW);
        delayMicroseconds (200);
      }
      olddir=dir;
      if (stopnow=true) {
        break;
      }
    }
  digitalWrite (EN, HIGH);
  //GP=GP+no_steps;
}

void movez(bool dir, int no_steps)
{
  digitalWrite (EN, LOW);
    if(dir){
      digitalWrite(Z1_DIR, true);
      digitalWrite(Z2_DIR, true);
    }
    else{
      digitalWrite(Z1_DIR, false);
      digitalWrite(Z2_DIR, false);
    }
    delay (50);
    for (int i = 0; i < (abs(no_steps)*800); i++) 
    {
        digitalWrite (Z1_STP, HIGH);
        digitalWrite (Z2_STP, HIGH);
        delayMicroseconds (200);
        digitalWrite (Z1_STP, LOW);
        digitalWrite (Z2_STP, LOW);
        delayMicroseconds (200);

        if (stopnow=true) {
          break;
      }
    }
  digitalWrite (EN, HIGH);
}
void setup () {   // The stepper motor used in the IO pin is set to output
    Serial.begin(9600);
    
    //Initalize pins
    pinMode (X_DIR, OUTPUT); 
    pinMode (X_STP, OUTPUT);
    
    pinMode (Z1_DIR, OUTPUT); 
    pinMode (Z1_STP, OUTPUT);
    
    pinMode (Z2_DIR, OUTPUT); 
    pinMode (Z2_STP, OUTPUT);
    
    pinMode (EN, OUTPUT);
    pinMode (ENDSTOP, INPUT);
    digitalWrite(ENDSTOP, HIGH);  // turn on pullup resistor

    //Enable CNC Shield
    digitalWrite (EN, HIGH);

    //Read Global position
    //GP=EEPROM.readInt(EEPROMaddress);

    //Disconnected
    DC=true;
}

void recvWithEndMarker() {
    static byte ndx = 0;
    char endMarker = '\n';
    char rc;
   
    if (Serial.available() > 0) {
        rc = Serial.read();

        if (rc != endMarker) {
            receivedChars[ndx] = rc;
            ndx++;
            if (ndx >= numChars) {
                ndx = numChars - 1;
            }
        }

        else {
            receivedChars[ndx] = '\0'; // terminate the string
            ndx = 0;
            newData = true;
        }
    }
    else {
      if (DC==false){
        DC=true;
        //EEPROM.writeInt(EEPROMaddress, GP);
      }
    } 
}

void showNewNumber() {
    if (newData == true) {
        if(strstr(receivedChars,"Arduino?")!=NULL){
          Serial.println("Arduino!");
          //Serial.println(GP);
          DC=false;
          newData = false;
          }
          else if(strstr(receivedChars,"Zero")!=NULL){
          //GP=0;
          //Serial.println(GP);
          newData = false;
          }
          else if(strstr(receivedChars,"GP")!=NULL){
          //Serial.println(GP);
          newData = false;
          }
          else if(strstr(receivedChars,"Stop")!=NULL){
          stopnow=true;
          newData = false;
          }
          else if(strstr(receivedChars,"Height")!=NULL){
          //Serial.println(GP);
          dataNumber = 0;             // new for this version
          dataNumber = atoi(receivedChars+6);
          Serial.print("Moving ");    // new for this version
          Serial.print(dataNumber);     // new for this version
          Serial.println(" mm in Height");
          if (dataNumber > 0){
            dir = true;
          }
          else{
            dir = false;
          }
          movez(dir, dataNumber);
          newData = false;
          }
          else {
              dataNumber = 0;             // new for this version
              dataNumber = atoi(receivedChars);   // new for this version
              Serial.print("Moving ");    // new for this version
              Serial.print(dataNumber);     // new for this version
              Serial.println(" mm");
              if (dataNumber > 0){
                dir = true;
              }
              else{
                dir = false;
              }
              step(dir, dataNumber);
              newData = false;
          }
    }
}

void loop () {
    recvWithEndMarker();
    showNewNumber();
    //Serial.println(digitalRead(ENDSTOP));

} 
